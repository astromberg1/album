@model WebAppen.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<div id="resultreg"></div>

<h2>@ViewBag.Title.</h2>
@using (Ajax.BeginForm("Register", "Account", new AjaxOptions
{
    OnSuccess = "OnSuccess",
    OnBegin = "OnBegin",
    OnFailure = "OnFailure",
    OnComplete = "OnComplete",
    UpdateTargetId = "resultreg",
    HttpMethod = "POST",
    InsertionMode = InsertionMode.ReplaceWith,



}, new { @id = "form", @class = "form-horizontal", role = "form" }

                    ))
{ 
    @Html.AntiForgeryToken()
    <h4>Create a new account.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })



    <div class="form-group">
        <div class="col-md-2 control-label">
            @Html.Label("User Role", new { @class = "col-md-2 control-label" })
            </div>
            <div class="col-md-10">

                @Html.DropDownList("UserRoles", ViewBag.Roles as SelectList, new { @class = "form-control" })


            </div>
        </div>


            <div class="form-group">
                @Html.LabelFor(m => m.FirstName, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.LastName, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" class="btn btn-default" value="Register" />
                </div>
            </div>
}

@section scripts{


    <script type="text/javascript">



    









            function OnBegin() {

                var opts = {
                    lines: 13 // The number of lines to draw
                    , length: 28 // The length of each line
                    , width: 14 // The line thickness
                    , radius: 42 // The radius of the inner circle
                    , scale: 2 // Scales overall size of the spinner
                    , corners: 1 // Corner roundness (0..1)
                    , color: '#000' // #rgb or #rrggbb or array of colors
                    , opacity: 0.25 // Opacity of the lines
                    , rotate: 0 // The rotation offset
                    , direction: 1 // 1: clockwise, -1: counterclockwise
                    , speed: 1 // Rounds per second
                    , trail: 60 // Afterglow percentage
                    , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
                    , zIndex: 2e9 // The z-index (defaults to 2000000000)
                    , className: 'spinner' // The CSS class to assign to the spinner
                    , top: '50%' // Top position relative to parent
                    , left: '50%' // Left position relative to parent
                    , shadow: false // Whether to render a shadow
                    , hwaccel: false // Whether to use hardware acceleration
                    , position: 'absolute' // Element positioning
                };



                //if (document.getElementById("idindex).click == true)

                var spinTarget = document.getElementById('screen');
                var spinner = new Spinner(opts);


                spinner.spin(spinTarget);
                $('#screen').data('spinner', spinner);

               };


                function OnFailure(response){




                //alert("Whoops! That didn't go so well did it?");
                //window.location.pathname = "/Account/Login");
                //location.assign(adress + "/Account/Login");


            };

            function OnSuccess(data, status, xhr) {
                //adress = "http://" + top.location.host.toString();

            //window.location.pathname = "/Home/Index";
            //location.assign(adress + "/Home/Index");
                $.validator.unobtrusive.parse("form");

                if (xhr.getResponseHeader('X-Error')) {
                    $("#resultreg").hide;

                    //validation error occurred
                }
                else {
                    window.location.pathname = "/Home/Index";
                    //validation error did not occur
                }



            };

            function OnComplete(response) {
                $(".spinner").remove();
                $.validator.unobtrusive.parse("form");

                

                

            };









    </script>
}




